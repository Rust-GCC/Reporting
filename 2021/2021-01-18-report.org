* Weekly Report 18th Jan to 25th Jan

The completed activities here are the final building blocks to complete
the remaining tasks for the first planned milestone.

In order to support the size type rules on ArrayIndexExpressions and allow
for code such as:

#+BEGIN_SRC rust
let a;         // <?>
a = 1;         // <?>   = <I?>
let b:u32 = a; // <u32> = <I?>
#+END_SRC

The LiteralExpression of '1' resolves to an IntegralInferenceVariable
which when unified as part of the HM algo resolves to a u32 for the chain
of references involved. If no type is determined this will default as
usual to i32. The PR commit message has a much better explanation of
this which will be used to bootstrap more documentation.

As for constuctors for algebraic data types this test cases involving a
base reference helped find some general bugs in how we handle returns
from functions:

#+BEGIN_SRC rust
struct Foo {
    a: i32,
    b: i32,
}

fn foo() -> Foo {
    Foo { a: 42, b: 32 }
}

fn main() {
    let _f = Foo { a: 10, ..foo() };
}
#+END_SRC

Thanks to contributions from Thomas Schwinge for fixing some compilation
warnings.

** Completed Activities

- Compilation warning fixes from [[https://github.com/tschwinge][Thomas Schwinge]] - [[https://github.com/Rust-GCC/gccrs/pull/160][PR160]] [[https://github.com/Rust-GCC/gccrs/pull/159][PR159]]
- Add expressions within parentheses [[https://github.com/Rust-GCC/gccrs/pull/156][PR156]]
- Complete all struct constructors with FieldAccessExpr and TupleIndexExpr  - [[https://github.com/Rust-GCC/gccrs/pull/162][PR162]] [[https://github.com/Rust-GCC/gccrs/pull/163][PR163]]
- Enforce typing rules on Arithmetic, Comparison and LazyBoolean Expressions - [[https://github.com/Rust-GCC/gccrs/pull/178][PR178]] [[https://github.com/Rust-GCC/gccrs/pull/165][PR165]]
- Implement Compound Assignment Expressions - [[https://github.com/Rust-GCC/gccrs/pull/174][PR174]] [[https://github.com/Rust-GCC/gccrs/pull/175][PR175]]
- Implement Unary Negation Expressions - [[https://github.com/Rust-GCC/gccrs/pull/176][PR176]]
- Add Float and Integer Inference variable - [[https://github.com/Rust-GCC/gccrs/pull/181][PR181]]
- Add Gimple building block to create QUAL_CONST nodes to enforce mutability - [[https://github.com/Rust-GCC/gccrs/pull/180][PR180]]

*** Overall Task Status

| Category    | Last Week | This Week | Delta |
|-------------+-----------+-----------+-------|
| TODO        |        36 |        42 |    +6 |
| In Progress |         5 |         3 |    -2 |
| Completed   |        35 |        43 |    +8 |

*** Test Cases

| TestCases | Last Week | This Week | Delta |
|-----------+-----------+-----------+-------|
| Passing   |       300 |       468 |  +168 |
| Failed    |         0 |         0 |     0 |

*** Milestones Progress

| Milestone              | Last Week | This Week | Delta | Start Date         | Completion Date | Target        |
|------------------------+-----------+-----------+-------+--------------------+-----------------+---------------|
| Data Structures 1      |       87% |       92% | +5%   | 30th November 2020 | -               | 29th Jan 2021 |
| Control Flow 1         |       25% |       25% | -     | -                  | -               | 26th Feb 2021 |
| Data Structures 2      |        0% |        0% | -     | -                  | -               | 28st May 2021 |
| Data Structures 3      |        0% |        0% | -     | -                  | -               | 27th Aug 2021 |
| Control Flow 2         |        0% |        0% | -     | -                  | -               | 29th Oct 2021 |
| Imports and Visibility |        0% |        0% | -     | -                  | -               | TBD           |

*** Risks

| Risk                  | Impact (1-3) | Likelihood (0-10) | Risk (I * L) | Mitigation                                                               |
|-----------------------+--------------+-------------------+--------------+--------------------------------------------------------------------------|
| Copyright assignments |            2 |                 5 |           10 | Be up front on all PRs that the code is destined to be upstreamed to FSF |

** Planned Activities

- Size types
- Mutability
- Unit Structs
- Add more test cases for the milestone
- Documentation
